name: Deploy to AWS Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Create deployment package
        run: |
          mkdir deployment

          # Export dependencies without hashes and exclude the local project
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          # Install dependencies to deployment directory
          pip install -r requirements.txt -t deployment/ --no-deps

          # Copy source code
          cp -r src/* deployment/

          # Copy lambda handler
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*"

      - name: Verify deployment package
        run: |
          echo "Checking deployment package contents..."
          unzip -l deployment.zip | head -20

          echo "Checking for app.py..."
          unzip -l deployment.zip | grep app.py || echo "app.py not found"

          echo "Checking for lambda_function.py..."
          unzip -l deployment.zip | grep lambda_function.py || echo "lambda_function.py not found"

          echo "Checking Python files..."
          unzip -l deployment.zip | grep "\.py$" | head -10

      - name: Create test event
        run: |
          cat > test-event.json << 'EOF'
          {
            "version": "2.0",
            "routeKey": "GET /",
            "rawPath": "/",
            "rawQueryString": "",
            "headers": {
              "accept": "text/html,application/xhtml+xml",
              "host": "tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws",
              "user-agent": "curl/7.68.0"
            },
            "requestContext": {
              "http": {
                "method": "GET",
                "path": "/",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
              }
            },
            "isBase64Encoded": false
          }
          EOF

      - name: Deploy to Lambda
        run: |
          # Check if function exists
          if ! aws lambda get-function --function-name child-allowance-tracker 2>/dev/null; then
            echo "Creating Lambda function..."
            aws lambda create-function \
              --function-name child-allowance-tracker \
              --runtime python3.12 \
              --role arn:aws:iam::960311492155:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment file://env-vars.json

            echo "Creating function URL..."
            aws lambda create-function-url-config \
              --function-name child-allowance-tracker \
              --cors AllowCredentials=false,AllowHeaders="*",AllowMethods="*",AllowOrigins="*" \
              --auth-type NONE || true

          else
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name child-allowance-tracker \
              --zip-file fileb://deployment.zip

            aws lambda update-function-configuration \
              --function-name child-allowance-tracker \
              --environment file://env-vars.json
          fi

      - name: Test deployed function
        run: |
          echo "Waiting for function to be ready..."
          sleep 10

          echo "Testing function directly..."
          aws lambda invoke \
            --function-name child-allowance-tracker \
            --payload file://test-event.json \
            response.json

          echo "Lambda invoke response:"
          cat response.json

          echo "Testing via URL with curl..."
          curl -v -X GET https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/ || echo "URL test failed"

      - name: Check CloudWatch logs
        run: |
          echo "Checking recent logs..."
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            || echo "No logs found or log group doesn't exist"

      - name: Get Function URL
        run: |
          URL=$(aws lambda get-function-url-config --function-name child-allowance-tracker --query 'FunctionUrl' --output text 2>/dev/null || echo "No URL configured")
          echo "ðŸš€ Function URL: $URL"
          echo "Function URL: $URL" >> $GITHUB_STEP_SUMMARY
