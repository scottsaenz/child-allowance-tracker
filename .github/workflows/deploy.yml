name: Deploy to AWS Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create environment variables JSON
        env:
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          AUTHORIZED_EMAILS: ${{ secrets.AUTHORIZED_EMAILS }}
        run: |
          # Create environment variables JSON file
          jq -n \
            --arg sheets_id "$GOOGLE_SHEETS_ID" \
            --arg service_account "$GOOGLE_SERVICE_ACCOUNT_JSON" \
            --arg emails "$AUTHORIZED_EMAILS" \
            '{
              Variables: {
                GOOGLE_SHEETS_ID: $sheets_id,
                GOOGLE_SERVICE_ACCOUNT_JSON: $service_account,
                AUTHORIZED_EMAILS: $emails,
                DYNAMODB_TABLE: "allowance-data-production",
                LOG_LEVEL: "INFO"
              }
            }' > env-vars.json

      - name: Create deployment package
        run: |
          mkdir deployment

          # Export dependencies without hashes and exclude the local project
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          # Install dependencies to deployment directory
          pip install -r requirements.txt -t deployment/ --no-deps

          # Copy source code
          cp -r src/* deployment/

          # Copy lambda handler
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*"

      - name: Verify deployment package
        run: |
          echo "Checking deployment package contents..."
          unzip -l deployment.zip | head -20

          echo "Checking for app.py..."
          unzip -l deployment.zip | grep app.py || echo "app.py not found"

          echo "Checking for lambda_function.py..."
          unzip -l deployment.zip | grep lambda_function.py || echo "lambda_function.py not found"

          echo "Checking Python files..."
          unzip -l deployment.zip | grep "\.py$" | head -10

      - name: Create test event
        run: |
          cat > test-event.json << 'EOF'
          {
            "version": "2.0",
            "routeKey": "GET /",
            "rawPath": "/",
            "rawQueryString": "",
            "headers": {
              "accept": "text/html,application/xhtml+xml",
              "host": "tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws",
              "user-agent": "curl/7.68.0"
            },
            "requestContext": {
              "http": {
                "method": "GET",
                "path": "/",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
              }
            },
            "isBase64Encoded": false
          }
          EOF

      - name: Deploy to Lambda
        run: |
          # Check if function exists
          if ! aws lambda get-function --function-name child-allowance-tracker 2>/dev/null; then
            echo "Creating Lambda function..."
            aws lambda create-function \
              --function-name child-allowance-tracker \
              --runtime python3.12 \
              --role arn:aws:iam::960311492155:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment file://env-vars.json

            echo "Creating function URL..."
            aws lambda create-function-url-config \
              --function-name child-allowance-tracker \
              --cors AllowCredentials=false,AllowHeaders="*",AllowMethods="*",AllowOrigins="*" \
              --auth-type NONE || true

          else
            echo "Checking if function needs updating..."

            # Get current function's CodeSha256
            CURRENT_SHA=$(aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.CodeSha256' --output text)
            echo "Current function CodeSha256: $CURRENT_SHA"

            # Calculate SHA256 of our deployment package
            NEW_SHA=$(openssl dgst -sha256 -binary deployment.zip | base64)
            echo "New deployment CodeSha256: $NEW_SHA"

            if [ "$CURRENT_SHA" != "$NEW_SHA" ]; then
              echo "Code has changed. Updating Lambda function..."

              aws lambda update-function-code \
                --function-name child-allowance-tracker \
                --zip-file fileb://deployment.zip

              echo "Waiting for function update to complete..."
              for i in {1..30}; do
                STATUS=$(aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.LastUpdateStatus' --output text)
                echo "Update status: $STATUS (attempt $i/30)"

                if [ "$STATUS" = "Successful" ]; then
                  echo "Function update completed successfully"
                  break
                elif [ "$STATUS" = "Failed" ]; then
                  echo "Function update failed"
                  exit 1
                fi

                sleep 10
              done

              if [ "$STATUS" != "Successful" ]; then
                echo "Function update timed out"
                exit 1
              fi
            else
              echo "✅ Code unchanged. Skipping function code update."
            fi

            # Always check and update environment variables if needed
            echo "Checking environment variables..."

            # Get current environment variables
            CURRENT_ENV=$(aws lambda get-function-configuration --function-name child-allowance-tracker --query 'Environment.Variables' --output json)
            NEW_ENV=$(cat env-vars.json | jq '.Variables')

            if [ "$CURRENT_ENV" != "$NEW_ENV" ]; then
              echo "Environment variables have changed. Updating configuration..."

              aws lambda update-function-configuration \
                --function-name child-allowance-tracker \
                --environment file://env-vars.json

              echo "Waiting for configuration update to complete..."
              for i in {1..30}; do
                STATUS=$(aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.LastUpdateStatus' --output text)
                echo "Configuration update status: $STATUS (attempt $i/30)"

                if [ "$STATUS" = "Successful" ]; then
                  echo "Configuration update completed successfully"
                  break
                elif [ "$STATUS" = "Failed" ]; then
                  echo "Configuration update failed"
                  exit 1
                fi

                sleep 5
              done
            else
              echo "✅ Environment variables unchanged. Skipping configuration update."
            fi
          fi

      - name: Verify Lambda configuration
        run: |
          echo "Checking Lambda function configuration..."
          aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.[State,LastUpdateStatus,Runtime,Handler]' --output table

          echo "Checking Function URL configuration..."
          aws lambda get-function-url-config --function-name child-allowance-tracker --output json

      - name: Test deployed function
        run: |
          echo "Waiting for function to be ready..."
          sleep 15

          echo "Testing via Function URL..."
          echo "==================================="

          # Test with more detailed error reporting
          echo "1. Testing root endpoint:"
          RESPONSE=$(curl -s https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/)
          echo "Response: $RESPONSE"
          echo "HTTP Status: $STATUS"

          echo ""
          echo "2. Testing health endpoint:"
          curl -s -w "\nHTTP Status: %{http_code}\n" \
            https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/health || echo "Health endpoint failed"

          echo ""
          echo "3. Testing with JSON accept header:"
          curl -s -H "Accept: application/json" -w "\nHTTP Status: %{http_code}\n" \
            https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/ || echo "JSON header test failed"

          echo ""
          echo "4. Verbose test to see full response:"
          curl -v https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/ || echo "Verbose test failed"

      - name: Check CloudWatch logs
        run: |
          echo "Checking recent logs..."

          # Wait a moment for logs to appear
          sleep 5

          # Check if log group exists
          if aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/child-allowance-tracker" --query 'logGroups[0].logGroupName' --output text | grep -q child-allowance-tracker; then
            echo "✅ Log group found"

            # Get the most recent log stream
            LATEST_STREAM=$(aws logs describe-log-streams \
              --log-group-name "/aws/lambda/child-allowance-tracker" \
              --order-by LastEventTime \
              --descending \
              --max-items 1 \
              --query 'logStreams[0].logStreamName' \
              --output text)

            if [ "$LATEST_STREAM" != "None" ] && [ -n "$LATEST_STREAM" ]; then
              echo "Latest log stream: $LATEST_STREAM"

              echo "Recent log events:"
              aws logs get-log-events \
                --log-group-name "/aws/lambda/child-allowance-tracker" \
                --log-stream-name "$LATEST_STREAM" \
                --start-from-head \
                --query 'events[*].[timestamp,message]' \
                --output table || echo "Failed to get log events"
            else
              echo "No log streams found"
            fi

            # Also try filter-log-events for recent events
            echo ""
            echo "Filtering recent events (last 10 minutes):"
            aws logs filter-log-events \
              --log-group-name "/aws/lambda/child-allowance-tracker" \
              --start-time $(date -d '10 minutes ago' +%s)000 \
              --query 'events[*].[timestamp,message]' \
              --output table || echo "No recent events found"

          else
            echo "❌ Log group /aws/lambda/child-allowance-tracker not found"
            echo "Available log groups:"
            aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/" --query 'logGroups[*].logGroupName' --output table
          fi

      - name: Get Function URL
        run: |
          URL=$(aws lambda get-function-url-config --function-name child-allowance-tracker --query 'FunctionUrl' --output text 2>/dev/null || echo "No URL configured")
          echo "🚀 Function URL: $URL"
          echo "Function URL: $URL" >> $GITHUB_STEP_SUMMARY

      - name: Test with minimal Lambda function
        run: |
          echo "Creating minimal test function..."

          # Create minimal test function
          cat > minimal_test.py << 'EOF'
          import json

          def lambda_handler(event, context):
              print(f"Event received: {event}")
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                  },
                  'body': json.dumps({
                      'message': 'Minimal test working!',
                      'event_method': event.get('requestContext', {}).get('http', {}).get('method', 'unknown'),
                      'event_path': event.get('rawPath', 'unknown')
                  })
              }
          EOF

          # Create minimal zip
          zip minimal.zip minimal_test.py

          # Deploy minimal function
          echo "Deploying minimal test function..."
          aws lambda update-function-code \
            --function-name child-allowance-tracker \
            --zip-file fileb://minimal.zip

          # Update handler
          aws lambda update-function-configuration \
            --function-name child-allowance-tracker \
            --handler minimal_test.lambda_handler

          echo "Waiting for minimal function to be ready..."
          sleep 10

          echo "Testing minimal function:"
          curl -s -w "\nHTTP Status: %{http_code}\n" \
            https://tl3dsklehljvtlqchtgum34gpm0vhulo.lambda-url.us-east-1.on.aws/

          # Check logs after minimal test
          echo ""
          echo "Checking logs after minimal test:"
          sleep 5
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '2 minutes ago' +%s)000 \
            --query 'events[*].message' \
            --output text || echo "No logs found"
