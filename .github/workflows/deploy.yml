name: Deploy FastAPI to AWS Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4  # Updated from v2 to v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies (including dev)
        run: uv sync --dev

      - name: Run tests
        run: uv run pytest -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4  # Updated from v2 to v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install production dependencies only
        run: uv sync --no-dev  # Removed unnecessary pytest install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create environment variables JSON
        env:
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          AUTHORIZED_EMAILS: ${{ secrets.AUTHORIZED_EMAILS }}
        run: |
          # Create environment variables JSON file
          jq -n \
            --arg sheets_id "$GOOGLE_SHEETS_ID" \
            --arg service_account "$GOOGLE_SERVICE_ACCOUNT_JSON" \
            --arg emails "$AUTHORIZED_EMAILS" \
            '{
              Variables: {
                GOOGLE_SHEETS_ID: $sheets_id,
                GOOGLE_SERVICE_ACCOUNT_JSON: $service_account,
                AUTHORIZED_EMAILS: $emails,
                DYNAMODB_TABLE: "allowance-data-production",
                LOG_LEVEL: "INFO",
                POWERTOOLS_SERVICE_NAME: "child-allowance-tracker",
                POWERTOOLS_METRICS_NAMESPACE: "ChildAllowanceApp"
              }
            }' > env-vars.json

      - name: Create deployment package
        run: |
          mkdir deployment

          # Export dependencies without hashes and exclude dev dependencies
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          # Install dependencies to deployment directory
          pip install -r requirements.txt -t deployment/ --no-deps

          # Copy source code
          cp -r src/* deployment/

          # Copy lambda handler
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*" "*.pytest_cache*"

      - name: Verify deployment package
        run: |
          echo "Checking deployment package contents..."
          unzip -l deployment.zip | head -30

          echo ""
          echo "=== CHECKING CRITICAL FILES ==="
          echo "lambda_function.py exists:"
          unzip -l deployment.zip | grep "lambda_function.py" || echo "❌ MISSING"

          echo "app.py exists:"
          unzip -l deployment.zip | grep "app.py" || echo "❌ MISSING"

          echo "fastapi module:"
          unzip -l deployment.zip | grep "fastapi" || echo "❌ MISSING"

          echo "mangum module:"
          unzip -l deployment.zip | grep "mangum" || echo "❌ MISSING"

          echo "aws_lambda_powertools module:"
          unzip -l deployment.zip | grep "aws_lambda_powertools" || echo "❌ MISSING"

          echo "boto3 module:"
          unzip -l deployment.zip | grep "boto3" || echo "❌ MISSING"

          echo ""
          echo "=== TESTING IMPORTS ==="
          # Extract and test imports
          mkdir -p test_extract
          cd test_extract
          unzip -q ../deployment.zip

          python3 -c "
          import sys, os
          print('Testing FastAPI and PowerTools imports...')

          try:
              from fastapi import FastAPI
              print('✅ FastAPI imported successfully')
          except Exception as e:
              print(f'❌ FastAPI import failed: {e}')

          try:
              from mangum import Mangum
              print('✅ Mangum imported successfully')
          except Exception as e:
              print(f'❌ Mangum import failed: {e}')

          try:
              from aws_lambda_powertools import Logger, Tracer, Metrics
              print('✅ AWS PowerTools imported successfully')
          except Exception as e:
              print(f'❌ PowerTools import failed: {e}')

          try:
              import boto3
              print('✅ boto3 imported successfully')
          except Exception as e:
              print(f'❌ boto3 import failed: {e}')

          try:
              import lambda_function
              print('✅ lambda_function imported successfully')
              print(f'Handler function exists: {hasattr(lambda_function, \"lambda_handler\")}')
          except Exception as e:
              print(f'❌ lambda_function import failed: {e}')
              import traceback
              traceback.print_exc()
          " || echo "Python test failed"

      - name: Create CloudWatch log group
        run: |
          echo "Creating CloudWatch log group..."
          aws logs create-log-group \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --region us-east-1 || echo "Log group already exists"

          # Set retention policy
          aws logs put-retention-policy \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --retention-in-days 14 || echo "Failed to set retention policy"

      - name: Deploy to Lambda
        run: |
          echo "Using existing Lambda execution role: arn:aws:iam::960311492155:role/lambda-execution-role"

          # Check if function exists
          if ! aws lambda get-function --function-name child-allowance-tracker 2>/dev/null; then
            echo "Creating Lambda function..."
            aws lambda create-function \
              --function-name child-allowance-tracker \
              --runtime python3.13 \
              --role arn:aws:iam::960311492155:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 30 \
              --memory-size 512 \
              --environment file://env-vars.json

            echo "✅ Lambda function created"

          else
            echo "Function exists. Updating..."

            # Get current function's CodeSha256
            CURRENT_SHA=$(aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.CodeSha256' --output text)
            echo "Current function CodeSha256: $CURRENT_SHA"

            # Calculate SHA256 of our deployment package
            NEW_SHA=$(openssl dgst -sha256 -binary deployment.zip | base64)
            echo "New deployment CodeSha256: $NEW_SHA"

            if [ "$CURRENT_SHA" != "$NEW_SHA" ]; then
              echo "Code has changed. Updating Lambda function..."

              aws lambda update-function-code \
                --function-name child-allowance-tracker \
                --zip-file fileb://deployment.zip

              echo "Waiting for function update to complete..."
              aws lambda wait function-updated --function-name child-allowance-tracker
              echo "Function code update completed"
            else
              echo "✅ Code unchanged. Skipping function code update."
            fi

            # Update environment variables (always do this in case secrets changed)
            echo "Updating environment variables..."
            aws lambda update-function-configuration \
              --function-name child-allowance-tracker \
              --environment file://env-vars.json

            echo "Waiting for configuration update to complete..."
            aws lambda wait function-updated --function-name child-allowance-tracker
            echo "Configuration update completed"
          fi

      - name: Create API Gateway
        run: |
          echo "Creating/updating API Gateway..."

          # Check if API exists
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='child-allowance-tracker-api'].ApiId" --output text 2>/dev/null || echo "")

          if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
            echo "Creating new API Gateway..."
            API_ID=$(aws apigatewayv2 create-api \
              --name child-allowance-tracker-api \
              --protocol-type HTTP \
              --target arn:aws:lambda:us-east-1:960311492155:function:child-allowance-tracker \
              --route-key 'ANY /{proxy+}' \
              --query 'ApiId' --output text)
            echo "Created API with ID: $API_ID"
          else
            echo "API Gateway already exists with ID: $API_ID"
          fi

          # Store API ID for later steps
          echo "API_ID=$API_ID" >> $GITHUB_ENV

          # Give API Gateway permission to invoke Lambda
          aws lambda add-permission \
            --function-name child-allowance-tracker \
            --statement-id AllowAPIGatewayInvoke \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:us-east-1:960311492155:$API_ID/*/*" || echo "Permission already exists"

          # Get the API endpoint
          API_ENDPOINT=$(aws apigatewayv2 get-api --api-id $API_ID --query 'ApiEndpoint' --output text)
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV
          echo "✅ API Gateway endpoint: $API_ENDPOINT"

      - name: Test FastAPI endpoints
        run: |
          echo "Waiting for API Gateway to be ready..."
          sleep 15

          echo "Testing FastAPI via API Gateway..."
          echo "API Endpoint: $API_ENDPOINT"
          echo "==================================="

          # Test health endpoint
          echo "1. Testing health endpoint:"
          HEALTH_RESPONSE=$(curl -s $API_ENDPOINT/health || echo "curl failed")
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/health || echo "status check failed")
          echo "Health Response: $HEALTH_RESPONSE"
          echo "Health HTTP Status: $HEALTH_STATUS"

          echo ""
          echo "2. Testing root endpoint:"
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/ || echo "status check failed")
          echo "Root HTTP Status: $ROOT_STATUS"

          echo ""
          echo "3. Testing API documentation:"
          DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/docs || echo "status check failed")
          echo "Docs HTTP Status: $DOCS_STATUS"

          echo ""
          echo "4. Testing dashboard API:"
          DASHBOARD_RESPONSE=$(curl -s $API_ENDPOINT/api/dashboard || echo "curl failed")
          DASHBOARD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/api/dashboard || echo "status check failed")
          echo "Dashboard Response: $DASHBOARD_RESPONSE"
          echo "Dashboard HTTP Status: $DASHBOARD_STATUS"

          echo ""
          echo "5. Testing children API:"
          CHILDREN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/api/children || echo "status check failed")
          echo "Children API HTTP Status: $CHILDREN_STATUS"

          echo ""
          echo "=== SUMMARY ==="
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ Health endpoint working!"
          else
            echo "❌ Health endpoint failed"
          fi

          if [ "$ROOT_STATUS" = "200" ]; then
            echo "✅ Root endpoint working!"
          else
            echo "❌ Root endpoint failed"
          fi

          if [ "$DOCS_STATUS" = "200" ]; then
            echo "✅ API documentation working!"
          else
            echo "❌ API documentation failed"
          fi

      - name: Display final URLs
        run: |
          echo "🚀 Deployment Complete!"
          echo "================================="
          echo "Main Application: $API_ENDPOINT/"
          echo "Health Check: $API_ENDPOINT/health"
          echo "API Documentation: $API_ENDPOINT/docs"
          echo "API Dashboard: $API_ENDPOINT/api/dashboard"
          echo "Children API: $API_ENDPOINT/api/children"
          echo ""
          echo "Main Application: $API_ENDPOINT/" >> $GITHUB_STEP_SUMMARY
          echo "API Documentation: $API_ENDPOINT/docs" >> $GITHUB_STEP_SUMMARY
