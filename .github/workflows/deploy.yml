name: Deploy to AWS Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Create deployment package
        run: |
          mkdir deployment

          # Export dependencies without hashes and exclude the local project
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          # Install dependencies to deployment directory
          pip install -r requirements.txt -t deployment/ --no-deps

          # Copy source code
          cp -r src/* deployment/

          # Copy lambda handler
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check if Lambda execution role exists
        run: |
          if ! aws iam get-role --role-name lambda-execution-role 2>/dev/null; then
            echo "Creating Lambda execution role..."

            # Create trust policy
            cat > trust-policy.json << 'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF

            # Create the role
            aws iam create-role \
              --role-name lambda-execution-role \
              --assume-role-policy-document file://trust-policy.json

            # Attach basic execution policy
            aws iam attach-role-policy \
              --role-name lambda-execution-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

            # Create and attach DynamoDB policy
            cat > dynamodb-policy.json << 'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:Query",
                  "dynamodb:Scan"
                ],
                "Resource": "arn:aws:dynamodb:us-east-1:960311492155:table/allowance-data-*"
              }
            ]
          }
          EOF

            aws iam put-role-policy \
              --role-name lambda-execution-role \
              --policy-name DynamoDBAccess \
              --policy-document file://dynamodb-policy.json

            echo "Waiting for role to be available..."
            sleep 10
          else
            echo "Lambda execution role already exists"
          fi

      - name: Create environment variables JSON
        env:
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          AUTHORIZED_EMAILS: ${{ secrets.AUTHORIZED_EMAILS }}
        run: |
          # Create environment variables JSON file
          jq -n \
            --arg sheets_id "$GOOGLE_SHEETS_ID" \
            --arg service_account "$GOOGLE_SERVICE_ACCOUNT_JSON" \
            --arg emails "$AUTHORIZED_EMAILS" \
            '{
              Variables: {
                GOOGLE_SHEETS_ID: $sheets_id,
                GOOGLE_SERVICE_ACCOUNT_JSON: $service_account,
                AUTHORIZED_EMAILS: $emails,
                DYNAMODB_TABLE: "allowance-data-production",
                LOG_LEVEL: "INFO"
              }
            }' > env-vars.json

      - name: Deploy to Lambda
        run: |
          # Check if function exists
          if ! aws lambda get-function --function-name child-allowance-tracker 2>/dev/null; then
            echo "Creating Lambda function..."
            aws lambda create-function \
              --function-name child-allowance-tracker \
              --runtime python3.12 \
              --role arn:aws:iam::960311492155:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment file://env-vars.json

            echo "Creating function URL..."
            aws lambda create-function-url-config \
              --function-name child-allowance-tracker \
              --cors AllowCredentials=false,AllowHeaders="*",AllowMethods="*",AllowOrigins="*" \
              --auth-type NONE || true

          else
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name child-allowance-tracker \
              --zip-file fileb://deployment.zip

            aws lambda update-function-configuration \
              --function-name child-allowance-tracker \
              --environment file://env-vars.json
          fi

      - name: Get Function URL
        run: |
          URL=$(aws lambda get-function-url-config --function-name child-allowance-tracker --query 'FunctionUrl' --output text 2>/dev/null || echo "No URL configured")
          echo "ðŸš€ Function URL: $URL"
          echo "Function URL: $URL" >> $GITHUB_STEP_SUMMARY
