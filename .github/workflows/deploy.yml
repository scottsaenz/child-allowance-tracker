name: Deploy to AWS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Verify ruff installation
        run: |
          echo "=== CHECKING UV ENVIRONMENT ==="
          uv run python --version
          uv run pip list | grep ruff || echo "Ruff not found in pip list"

          # Try to run ruff directly
          uv run ruff --version || echo "Ruff command failed"

          # If ruff is missing, install it explicitly
          if ! uv run ruff --version; then
            echo "Installing ruff explicitly..."
            uv add --dev ruff
          fi

      - name: Run linting
        run: |
          uv run ruff check --fix .
          uv run ruff format .

      # REPLACE THIS STEP with the Docker version
      - name: Create Lambda-compatible deployment package using Docker
        run: |
          echo "=== CREATING LAMBDA-COMPATIBLE DEPLOYMENT PACKAGE ==="

          # Create a Dockerfile for building the package
          cat > Dockerfile.lambda << 'EOF'
          FROM public.ecr.aws/lambda/python:3.12

          # Copy requirements
          COPY requirements.txt .

          # Install dependencies in the Lambda environment
          RUN pip install --no-cache-dir -r requirements.txt -t /var/task/

          # List what was installed for debugging
          RUN find /var/task -name "*pydantic*" -type d
          RUN find /var/task -name "*fastapi*" -type d
          RUN ls -la /var/task/pydantic_core/ || echo "pydantic_core not found"

          # Create deployment directory
          RUN mkdir -p /deployment
          RUN cp -r /var/task/* /deployment/

          # Set working directory
          WORKDIR /deployment
          EOF

          # Export dependencies
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          echo "=== BUILDING LAMBDA PACKAGE IN DOCKER ==="

          # Build the Docker image
          docker build -f Dockerfile.lambda -t lambda-builder .

          # Create deployment directory
          mkdir -p deployment

          # Extract the built packages from Docker
          docker run --rm -v $(pwd)/deployment:/output lambda-builder sh -c "cp -r /deployment/* /output/"

          echo "=== VERIFYING EXTRACTED PACKAGES ==="
          find deployment -name "*pydantic_core*" -type d | head -5
          find deployment -name "_pydantic_core*" | head -5
          ls -la deployment/pydantic_core/ || echo "pydantic_core directory not found"

          # Copy source code
          cp -r src/* deployment/
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*" "*.pytest_cache*"

          echo "=== DEPLOYMENT ZIP INFO ==="
          ls -lh ../deployment.zip
          unzip -l ../deployment.zip | grep -E "(pydantic|fastapi|mangum)" | head -10

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create environment variables JSON
        env:
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          AUTHORIZED_EMAILS: ${{ secrets.AUTHORIZED_EMAILS }}
        run: |
          # Create environment variables JSON file
          jq -n \
            --arg sheets_id "$GOOGLE_SHEETS_ID" \
            --arg service_account "$GOOGLE_SERVICE_ACCOUNT_JSON" \
            --arg emails "$AUTHORIZED_EMAILS" \
            '{
              Variables: {
                GOOGLE_SHEETS_ID: $sheets_id,
                GOOGLE_SERVICE_ACCOUNT_JSON: $service_account,
                AUTHORIZED_EMAILS: $emails,
                DYNAMODB_TABLE: "allowance-data-production",
                LOG_LEVEL: "DEBUG",
                POWERTOOLS_SERVICE_NAME: "child-allowance-tracker",
                POWERTOOLS_METRICS_NAMESPACE: "ChildAllowanceApp",
                POWERTOOLS_LOG_LEVEL: "DEBUG"
              }
            }' > env-vars.json

      - name: Create deployment package
        run: |
          mkdir deployment

          # Export dependencies without hashes and exclude dev dependencies
          uv export --format requirements-txt --no-hashes --no-dev > requirements.txt

          # Install dependencies to deployment directory
          pip install -r requirements.txt -t deployment/ --no-deps

          # Copy source code
          cp -r src/* deployment/

          # Copy lambda handler
          cp lambda_function.py deployment/

          # Create deployment zip
          cd deployment && zip -r ../deployment.zip . -x "*.pyc" "*/__pycache__/*" "*.pytest_cache*"

      - name: Verify deployment package
        run: |
          echo "Checking deployment package contents..."
          unzip -l deployment.zip | head -30

          echo ""
          echo "=== CHECKING CRITICAL FILES ==="
          echo "lambda_function.py exists:"
          unzip -l deployment.zip | grep "lambda_function.py" || echo "❌ MISSING"

          echo "app.py exists:"
          unzip -l deployment.zip | grep "app.py" || echo "❌ MISSING"

          echo "fastapi module:"
          unzip -l deployment.zip | grep "fastapi" || echo "❌ MISSING"

          echo "mangum module:"
          unzip -l deployment.zip | grep "mangum" || echo "❌ MISSING"

          echo "aws_lambda_powertools module:"
          unzip -l deployment.zip | grep "aws_lambda_powertools" || echo "❌ MISSING"

          echo "boto3 module:"
          unzip -l deployment.zip | grep "boto3" || echo "❌ MISSING"

          echo ""
          echo "=== TESTING IMPORTS ==="
          # Extract and test imports
          mkdir -p test_extract
          cd test_extract
          unzip -q ../deployment.zip

          python3 -c "
          import sys, os
          print('Testing FastAPI and PowerTools imports...')

          try:
              from fastapi import FastAPI
              print('✅ FastAPI imported successfully')
          except Exception as e:
              print(f'❌ FastAPI import failed: {e}')

          try:
              from mangum import Mangum
              print('✅ Mangum imported successfully')
          except Exception as e:
              print(f'❌ Mangum import failed: {e}')

          try:
              from aws_lambda_powertools import Logger, Tracer, Metrics
              print('✅ AWS PowerTools imported successfully')
          except Exception as e:
              print(f'❌ PowerTools import failed: {e}')

          try:
              import boto3
              print('✅ boto3 imported successfully')
          except Exception as e:
              print(f'❌ boto3 import failed: {e}')

          try:
              import lambda_function
              print('✅ lambda_function imported successfully')
              print(f'Handler function exists: {hasattr(lambda_function, \"lambda_handler\")}')
          except Exception as e:
              print(f'❌ lambda_function import failed: {e}')
              import traceback
              traceback.print_exc()
          " || echo "Python test failed"

      - name: Create CloudWatch log group
        run: |
          echo "Creating CloudWatch log group..."
          aws logs create-log-group \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --region us-east-1 || echo "Log group already exists"

          # Set retention policy
          aws logs put-retention-policy \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --retention-in-days 14 || echo "Failed to set retention policy"

      - name: Deploy to Lambda
        run: |
          echo "Using existing Lambda execution role: arn:aws:iam::960311492155:role/lambda-execution-role"

          # Check if function exists
          if ! aws lambda get-function --function-name child-allowance-tracker 2>/dev/null; then
            echo "Creating Lambda function..."
            aws lambda create-function \
              --function-name child-allowance-tracker \
              --runtime python3.13 \
              --role arn:aws:iam::960311492155:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 30 \
              --memory-size 512 \
              --environment file://env-vars.json

            echo "✅ Lambda function created"

          else
            echo "Function exists. Updating..."

            # Get current function's CodeSha256
            CURRENT_SHA=$(aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.CodeSha256' --output text)
            echo "Current function CodeSha256: $CURRENT_SHA"

            # Calculate SHA256 of our deployment package
            NEW_SHA=$(openssl dgst -sha256 -binary deployment.zip | base64)
            echo "New deployment CodeSha256: $NEW_SHA"

            if [ "$CURRENT_SHA" != "$NEW_SHA" ]; then
              echo "Code has changed. Updating Lambda function..."

              aws lambda update-function-code \
                --function-name child-allowance-tracker \
                --zip-file fileb://deployment.zip

              echo "Waiting for function update to complete..."
              aws lambda wait function-updated --function-name child-allowance-tracker
              echo "Function code update completed"
            else
              echo "✅ Code unchanged. Skipping function code update."
            fi

            # Update environment variables (always do this in case secrets changed)
            echo "Updating environment variables..."
            aws lambda update-function-configuration \
              --function-name child-allowance-tracker \
              --environment file://env-vars.json

            echo "Waiting for configuration update to complete..."
            aws lambda wait function-updated --function-name child-allowance-tracker
            echo "Configuration update completed"
          fi

      - name: Create API Gateway
        run: |
          echo "Creating/updating API Gateway..."

          # Check if API exists
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='child-allowance-tracker-api'].ApiId" --output text 2>/dev/null || echo "")

          if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
            echo "Creating new API Gateway..."
            API_ID=$(aws apigatewayv2 create-api \
              --name child-allowance-tracker-api \
              --protocol-type HTTP \
              --target arn:aws:lambda:us-east-1:960311492155:function:child-allowance-tracker \
              --route-key 'ANY /{proxy+}' \
              --query 'ApiId' --output text)
            echo "Created API with ID: $API_ID"
          else
            echo "API Gateway already exists with ID: $API_ID"
          fi

          # Store API ID for later steps
          echo "API_ID=$API_ID" >> $GITHUB_ENV

          # Give API Gateway permission to invoke Lambda
          aws lambda add-permission \
            --function-name child-allowance-tracker \
            --statement-id AllowAPIGatewayInvoke \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:us-east-1:960311492155:$API_ID/*/*" || echo "Permission already exists"

          # Get the API endpoint
          API_ENDPOINT=$(aws apigatewayv2 get-api --api-id $API_ID --query 'ApiEndpoint' --output text)
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV
          echo "✅ API Gateway endpoint: $API_ENDPOINT"

      - name: Debug Lambda function after deployment
        run: |
          echo "=== LAMBDA FUNCTION STATUS ==="
          aws lambda get-function --function-name child-allowance-tracker --query 'Configuration.[State,StateReason,LastUpdateStatus,LastUpdateStatusReason,Runtime]' --output table

          echo ""
          echo "=== LAMBDA RESOURCE POLICY ==="
          aws lambda get-policy --function-name child-allowance-tracker --query 'Policy' --output text | jq '.' || echo "No policy found"

          echo ""
          echo "=== CHECKING RECENT LAMBDA LOGS ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '10 minutes ago' +%s)000 \
            --query 'events[*].[timestamp,message]' \
            --output text | sort | tail -20 || echo "No recent logs found"

      - name: Test individual API Gateway endpoints with debugging
        run: |
          echo "=== API GATEWAY DEBUGGING ==="
          echo "API Endpoint: $API_ENDPOINT"
          echo "Expected API Gateway ID: xt7m8ql2y6"
          echo "Current API ID: $API_ID"

          # Verify API Gateway configuration
          echo ""
          echo "=== API GATEWAY CONFIGURATION ==="
          aws apigatewayv2 get-api --api-id $API_ID --query '[Name,ProtocolType,Target,RouteSelectionExpression]' --output table

          echo ""
          echo "=== API GATEWAY ROUTES ==="
          aws apigatewayv2 get-routes --api-id $API_ID --query 'Items[*].[RouteKey,Target]' --output table

          echo ""
          echo "=== TESTING ENDPOINTS WITH VERBOSE OUTPUT ==="

          # Test health endpoint with full debugging
          echo "1. Testing health endpoint with verbose curl:"
          curl -v -X GET "$API_ENDPOINT/health" \
            -H "Accept: application/json" \
            -H "User-Agent: GitHub-Actions-Test" \
            --connect-timeout 10 \
            --max-time 30 \
            2>&1 | head -50 || echo "Health endpoint curl failed"

          echo ""
          echo "2. Testing root endpoint:"
          curl -v -X GET "$API_ENDPOINT/" \
            -H "Accept: text/html,application/json" \
            --connect-timeout 10 \
            --max-time 30 \
            2>&1 | head -30 || echo "Root endpoint curl failed"

          echo ""
          echo "3. Testing a simple GET that should work:"
          curl -v -X GET "$API_ENDPOINT/docs" \
            -H "Accept: text/html" \
            --connect-timeout 10 \
            --max-time 30 \
            2>&1 | head -30 || echo "Docs endpoint curl failed"

      - name: Check CloudWatch logs after API calls
        run: |
          echo "=== WAITING FOR LOGS TO PROPAGATE ==="
          sleep 30

          echo "=== ALL LAMBDA LOGS FROM LAST 5 MINUTES ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            --query 'events[*].message' \
            --output text | tail -100 || echo "No logs found"

          echo ""
          echo "=== LAMBDA DEBUG LOGS ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            --filter-pattern "DEBUG" \
            --query 'events[*].message' \
            --output text || echo "No debug logs found"

          echo ""
          echo "=== LAMBDA ERROR LOGS ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            --filter-pattern "ERROR" \
            --query 'events[*].message' \
            --output text || echo "No error logs found"

          echo ""
          echo "=== LAMBDA EXCEPTION/TRACEBACK LOGS ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            --filter-pattern "?Exception ?Traceback ?ImportError" \
            --query 'events[*].message' \
            --output text || echo "No exception logs found"

          echo ""
          echo "=== INIT LOGS (COLD START) ==="
          aws logs filter-log-events \
            --log-group-name "/aws/lambda/child-allowance-tracker" \
            --start-time $(date -d '5 minutes ago' +%s)000 \
            --filter-pattern "?starting ?imported ?created" \
            --query 'events[*].message' \
            --output text || echo "No init logs found"

      - name: Enhanced deployment package verification
        run: |
          echo "=== ENHANCED PACKAGE VERIFICATION ==="

          # Check if we're using the right Python version in deployment
          echo "Python version used for deployment:"
          python3 --version

          echo ""
          echo "=== CHECKING DEPLOYMENT STRUCTURE ==="
          unzip -l deployment.zip | grep -E "\.py$" | head -20

          echo ""
          echo "=== TESTING DEPLOYMENT PACKAGE LOCALLY ==="
          mkdir -p local_test
          cd local_test
          unzip -q ../deployment.zip

          # Set PYTHONPATH to current directory
          export PYTHONPATH=".:$PYTHONPATH"

          echo "Testing imports with PYTHONPATH set to current directory:"
          python3 -c "
          import sys
          import os
          print(f'Python version: {sys.version}')
          print(f'Working directory: {os.getcwd()}')
          print(f'Python path: {sys.path[:5]}')
          print('Files in current directory:')
          for f in os.listdir('.'):
              if f.endswith('.py'):
                  print(f'  {f}')
          " || echo "Basic test failed"

          python3 -c "
          try:
              import lambda_function
              print('✅ lambda_function imported')

              # Check if handler exists and is callable
              if hasattr(lambda_function, 'lambda_handler'):
                  handler = lambda_function.lambda_handler
                  print(f'✅ lambda_handler exists and is callable: {callable(handler)}')
              else:
                  print('❌ lambda_handler not found')

          except Exception as e:
              print(f'❌ lambda_function import failed: {e}')
              import traceback
              traceback.print_exc()
          " || echo "Lambda function test failed"

          python3 -c "
          try:
              import app
              print('✅ app module imported')

              if hasattr(app, 'app'):
                  fastapi_app = app.app
                  print(f'✅ FastAPI app found: {type(fastapi_app)}')
              else:
                  print('❌ FastAPI app not found in app module')

          except Exception as e:
              print(f'❌ app import failed: {e}')
              import traceback
              traceback.print_exc()
          " || echo "App test failed"

      - name: Test FastAPI endpoints
        run: |
          echo "Waiting for API Gateway and Lambda to be ready..."
          sleep 15

          echo "Testing FastAPI via API Gateway..."
          echo "API Endpoint: $API_ENDPOINT"
          echo "==================================="

          # Test health endpoint
          echo "1. Testing health endpoint:"
          HEALTH_RESPONSE=$(curl -s $API_ENDPOINT/health || echo "curl failed")
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/health || echo "status check failed")
          echo "Health Response: $HEALTH_RESPONSE"
          echo "Health HTTP Status: $HEALTH_STATUS"

          echo ""
          echo "2. Testing root endpoint:"
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/ || echo "status check failed")
          echo "Root HTTP Status: $ROOT_STATUS"

          echo ""
          echo "3. Testing API documentation:"
          DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/docs || echo "status check failed")
          echo "Docs HTTP Status: $DOCS_STATUS"

          # Add debug endpoint if it exists
          echo ""
          echo "4. Testing debug endpoint (if exists):"
          DEBUG_RESPONSE=$(curl -s $API_ENDPOINT/debug || echo "debug endpoint not available")
          DEBUG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/debug || echo "status check failed")
          echo "Debug Response: $DEBUG_RESPONSE"
          echo "Debug HTTP Status: $DEBUG_STATUS"

          echo ""
          echo "5. Testing dashboard API:"
          DASHBOARD_RESPONSE=$(curl -s $API_ENDPOINT/api/dashboard || echo "curl failed")
          DASHBOARD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/api/dashboard || echo "status check failed")
          echo "Dashboard Response: $DASHBOARD_RESPONSE"
          echo "Dashboard HTTP Status: $DASHBOARD_STATUS"

          echo ""
          echo "6. Testing children API:"
          CHILDREN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_ENDPOINT/api/children || echo "status check failed")
          echo "Children API HTTP Status: $CHILDREN_STATUS"

          echo ""
          echo "=== SUMMARY ==="
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ Health endpoint working!"
          else
            echo "❌ Health endpoint failed"
          fi

          if [ "$ROOT_STATUS" = "200" ]; then
            echo "✅ Root endpoint working!"
          else
            echo "❌ Root endpoint failed"
          fi

          if [ "$DOCS_STATUS" = "200" ]; then
            echo "✅ API documentation working!"
          else
            echo "❌ API documentation failed"
          fi

      - name: Display final URLs
        run: |
          echo "🚀 Deployment Complete!"
          echo "================================="
          echo "Main Application: $API_ENDPOINT/"
          echo "Health Check: $API_ENDPOINT/health"
          echo "API Documentation: $API_ENDPOINT/docs"
          echo "API Dashboard: $API_ENDPOINT/api/dashboard"
          echo "Children API: $API_ENDPOINT/api/children"
          echo ""
          echo "Main Application: $API_ENDPOINT/" >> $GITHUB_STEP_SUMMARY
          echo "API Documentation: $API_ENDPOINT/docs" >> $GITHUB_STEP_SUMMARY
